[%%shared
(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)
(* PGOcaml demo *)
open Eliom_content.Html.F
open Db_types
open Ww_lib]

let%rpc get_headlines_for_file_path (file_path : string)
    : Db_types.headline list Lwt.t
  =
  Org_db.get_headlines_for_file_path file_path

let%rpc get_headlines_for_id (roam_id : string) : Db_types.headline list Lwt.t =
  Org_db.get_headlines_for_id roam_id

let%rpc get_headline_id_for_roam_id (roam_id : string)
    : (int32 * string) option Lwt.t
  =
  Org_db.get_headline_id_for_roam_id roam_id

[%%shared.start]

let make_collapsible ~id title content =
  (* https://www.digitalocean.com/community/tutorials/css-collapsible *)
  div ~a:[a_class ["header wrap-collapsible"; "indent-1"]]
  @@ [ input
         ~a:
           [ a_id id
           ; a_class ["toggle"]
           ; a_input_type `Checkbox
           ; a_checked ()
           ; a_tabindex 0 ]
         ()
     ; label ~a:[a_label_for id; a_class ["lbl-toggle"]] title
     ; div ~a:[a_class ["collapsible-content"]] content ]

let org_text_to_html s =
  let find_links s =
    let link_re = Str.regexp {|\[\[id:\([^][]+\)\]\[\([^][]+\)\]\]|} in
    Str.full_split link_re s
    |> List.map
         Str.(
           function
           | Text t -> Lwt.return @@ txt t | Delim t -> Lwt.return @@ txt "lol")
    |> Org.lwt_flatten []
  in
  let rec add_brs acc = function
    | [] -> Lwt.return []
    | e :: [] ->
        let%lwt a = find_links e in
        Lwt.return @@ acc @ a
    | e :: l ->
        let%lwt a = find_links e in
        add_brs (acc @ a @ [br ()]) l
  in
  String.split_on_char '\n' s |> add_brs []

let make_tree_org_note ?headline_id title headlines =
  let root =
    Org.Node
      ( { Db_types.headline_id = -1l
        ; parent_id = -1l
        ; headline_text = title
        ; content = None
        ; level = None
        ; headline_index = None }
      , [] )
  in
  let tree = Org.make_org_note_tree headlines root in
  let tree =
    Option.fold headline_id ~none:tree ~some:(fun hid ->
        Org.get_subtree
          (fun (hl : Db_types.headline) -> hl.headline_id = hid)
          tree)
  in
  let hl_to_html h children =
    let%lwt title = org_text_to_html h.headline_text in
    let id = string_of_int @@ Int32.to_int h.headline_id in
    match h.content with
    | None -> Lwt.return @@ make_collapsible ~id title @@ children
    | Some c ->
        let%lwt c = org_text_to_html c in
        Lwt.return @@ make_collapsible ~id title
        @@ [div ~a:[a_class ["content"]] (c @ children)]
  in
  Org.map_tree_to_html hl_to_html tree

let rec add_slash = function
  | a :: b :: l -> a :: "/" :: add_slash (b :: l)
  | a :: [] -> [a]
  | [] -> []

let file_page file_path () =
  let file_path = String.concat "" @@ add_slash file_path in
  let%lwt org_note =
    Ot_spinner.with_spinner
      (let%lwt hls = get_headlines_for_file_path file_path in
       let%lwt hls = make_tree_org_note "what" hls in
       Lwt.return [div [hls]])
  in
  (* a title would be nice: h1 [%i18n Demo.pgocaml]; *)
  Lwt.return [org_note]

let id_page roam_id () =
  let%lwt org_note =
    Ot_spinner.with_spinner
      (let%lwt hls = get_headlines_for_id roam_id in
       let%lwt parent_hl_res = get_headline_id_for_roam_id roam_id in
       let title =
         Option.map
           (fun (headline_id, file_path) ->
             h3
               [ txt "from file : "
               ; a ~service:Maxi_passat_services.org_file [txt file_path]
                 @@ String.split_on_char '\n' file_path ])
           parent_hl_res
       in
       let headline_id =
         Option.map (fun (headline_id, _file_path) -> headline_id) parent_hl_res
       in
       let%lwt hls = make_tree_org_note "what" hls ?headline_id in
       Lwt.return @@ title @? [div [hls]])
  in
  Lwt.return [org_note]

let () =
  Maxi_passat_base.App.register ~service:Maxi_passat_services.org_file
    ( Maxi_passat_page.Opt.connected_page @@ fun myid_o file_path () ->
      let%lwt p = file_page file_path () in
      Maxi_passat_container.page ~a:[a_class ["org-page"]] myid_o p );
  Maxi_passat_base.App.register ~service:Maxi_passat_services.org_id
    ( Maxi_passat_page.Opt.connected_page @@ fun myid_o id () ->
      let%lwt p = id_page id () in
      Maxi_passat_container.page ~a:[a_class ["org-page"]] myid_o p )
