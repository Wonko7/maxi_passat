[%%shared
(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)
(* PGOcaml demo *)
open Eliom_content.Html
open Eliom_content.Html.F]

let%rpc get_all_org_files () : string list Lwt.t = Org_db.get_all_org_files ()
[%%shared.start]

let%shared search_str r s =
  try
    ignore @@ Str.search_forward r s 0;
    true
  with Not_found -> false

let%shared search_files
    ?(onclick :
       (?target_hlid:int32 -> string -> unit Lwt.t) Eliom_client_value.t option)
    ()
  =
  let%lwt fs = get_all_org_files () in
  let res_s, set_results = Eliom_shared.React.S.create (0, []) in
  let a_search_keyboard_ui =
    [ a_onkeydown
        [%client
          let incr_sel i =
            let i', fs = React.S.value ~%res_s in
            ~%set_results (i + i', fs)
          in
          fun ev ->
            match ev##.keyCode with
            (* arrows order [37-40] = lurd *)
            | 38 -> print_endline "up"; incr_sel (-1)
            | 40 -> print_endline "down"; incr_sel 1
            | 13 -> print_endline "enter"
            | e -> print_int e; print_endline ""] ]
  in
  let e, (in_s, set_in), (out_s, set_out) =
    Ww_lib.reactive_input ~a:a_search_keyboard_ui ()
  in
  let reset_search =
    [%client
      (fun () ->
         (* this only works if the signal is new, if you repeat "" it
            does not work. if you repeat "None" it won't work either. *)
         ~%set_in @@ String.cat "__None_"
         @@ string_of_float ((new%js Js_of_ocaml.Js.date_now)##getTime /. 1000.)
        : unit -> unit)]
  in
  let result =
    R.node
    @@ Eliom_shared.React.S.map ~eq:[%shared ( == )]
         [%shared
           let reset_search = ~%reset_search in
           fun (nb_selected, fs) ->
             ul
             @@ List.mapi
                  (fun i m ->
                    let selected_class =
                      if i = nb_selected then ["search_selected"] else []
                    in
                    print_int i;
                    print_endline " i";
                    print_int nb_selected;
                    print_endline " n";
                    li ~a:[a_class selected_class]
                    @@ [ (match ~%onclick with
                         | None ->
                             a ~service:Maxi_passat_services.org_file [txt m]
                             @@ String.split_on_char '/' m
                         | Some onclick ->
                             span
                               ~a:
                                 [ a_class ["link"]
                                 ; a_onclick
                                     [%client
                                       fun _ev ->
                                         ignore @@ ~%onclick ~%m;
                                         ~%reset_search ()] ]
                               [txt m]) ])
                  fs]
         res_s
  in
  let _ =
    [%client
      (React.S.map
         (function
           | "" -> ~%set_results (0, [])
           | s ->
               let r = Str.regexp_string s in
               let fs = List.filter (search_str r) ~%fs in
               ~%set_results (0, fs))
         ~%out_s
        : unit Eliom_shared.React.S.t)]
  in
  Lwt.return @@ div [e; div ~a:[a_class ["search_results"]] [result]]
