[%%shared
(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)
(* PGOcaml demo *)
open Eliom_content.Html.F
open Db_types
open Ww_lib]

(* Fetch users in database *)
let%rpc get_users () : string list Lwt.t =
  (* For this demo, we add a delay to simulate a network or db latency: *)
  let%lwt () = Lwt_unix.sleep 2. in
  Demo_pgocaml_db.get ()

let%rpc get_headlines () : Db_types.headline list Lwt.t =
  Demo_pgocaml_db.get_headlines ()

[%%shared.start]

type 'a tree = Leaf | Node of 'a * 'a tree list

let rec add_to_tree hl tree =
  (* can be optimised *)
  match tree with
  | Leaf -> Node (hl, [])
  | Node (thl, children) when hl.parent_id = thl.headline_id ->
      Node (thl, children @ [Node (hl, [])])
  | Node (thl, children) when hl.parent_id = hl.headline_id ->
      Node (thl, children @ [Node (hl, [])])
  | Node (thl, children) -> Node (thl, List.map (add_to_tree hl) children)

let rec make_org_note_tree headlines acc =
  match headlines with
  | [] -> acc
  | hl :: hls -> make_org_note_tree hls (add_to_tree hl acc)

let rec tree_to_div f tree =
  match tree with
  | Node (thl, children) ->
      let children = List.map (tree_to_div f) children in
      f thl children
  | Leaf -> div []

let org_text_to_html s =
  let rec add_brs = function
    | a :: [] -> [txt a]
    | [] -> []
    | a :: l -> [txt a; br ()] @ add_brs l
  in
  String.split_on_char '\n' s |> add_brs

let inf_i = ref 0

let make_collapsible title content =
  (* https://www.digitalocean.com/community/tutorials/css-collapsible *)
  inf_i := !inf_i + 1;
  let cid = String.cat "coll-" @@ string_of_int !inf_i in
  div ~a:[a_class ["header wrap-collapsible"; "indent-1"]]
  @@ [ input
         ~a:
           [ a_id cid
           ; a_class ["toggle"]
           ; a_input_type `Checkbox
           ; a_checked ()
           ; a_tabindex 0 ]
         ()
     ; label ~a:[a_label_for cid; a_class ["lbl-toggle"]] [txt title]
     ; div ~a:[a_class ["collapsible-content"]] content ]

let make_tree_org_note title headlines =
  let root =
    Node
      ( { Db_types.headline_id = -1l
        ; parent_id = -1l
        ; headline_text = title
        ; content = None
        ; level = None
        ; headline_index = None }
      , [] )
  in
  let tree = make_org_note_tree headlines root in
  let hl_to_html h children =
    let c =
      Option.map
        (fun c -> div ~a:[a_class ["content"]] @@ org_text_to_html c)
        h.content
    in
    make_collapsible h.headline_text @@ c @? children
  in
  [tree_to_div hl_to_html tree]

(* Generate page for this demo *)
let page () =
  let%lwt org_note =
    Ot_spinner.with_spinner
      (let%lwt hls = get_headlines () in
       (* let hls = make_flat_org_note "what" hls in *)
       let hls = make_tree_org_note "what" hls in
       Lwt.return [div hls])
  in
  Lwt.return [h1 [%i18n Demo.pgocaml]; org_note]

(* Service registration is done on both sides (shared section),
   so that pages can be generated from the server
   (first request, crawling, search engines ...)
   or the client (subsequent link clicks, or mobile app ...). *)
let () =
  Maxi_passat_base.App.register ~service:Demo_services.demo_pgocaml
    ( Maxi_passat_page.Opt.connected_page @@ fun myid_o () () ->
      let%lwt p = page () in
      Maxi_passat_container.page ~a:[a_class ["os-page-demo-pgocaml"]] myid_o p
    )
